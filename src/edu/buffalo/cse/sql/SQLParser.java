/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package edu.buffalo.cse.sql;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.List;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import edu.buffalo.cse.sql.Schema;
import edu.buffalo.cse.sql.Schema.Column;
import edu.buffalo.cse.sql.data.Datum;
import edu.buffalo.cse.sql.data.Datum.CastError;
import edu.buffalo.cse.sql.plan.AggregateNode;
import edu.buffalo.cse.sql.plan.AggregateNode.AggColumn;
import edu.buffalo.cse.sql.plan.ExprTree;
import edu.buffalo.cse.sql.plan.JoinNode;
import edu.buffalo.cse.sql.plan.PlanNode;
import edu.buffalo.cse.sql.plan.PlanNode.Binary;
import edu.buffalo.cse.sql.plan.PlanNode.Unary;
import edu.buffalo.cse.sql.plan.ProjectionNode;
import edu.buffalo.cse.sql.plan.ScanNode;
import edu.buffalo.cse.sql.plan.SelectionNode;

public class SQLParser implements SQLParserConstants {
  List<PlanNode > initParser(Map < String, Schema.TableFromFile > tables) throws ParseException, TokenMgrError
  {
    initTables(tables);
    return initPlannode(tables);
  }

  static final public void initTables(Map < String, Schema.TableFromFile > tables) throws ParseException {
  Token T, path;
  Schema.TableFromFile table = null;
  LinkedHashMap < String, String > columnMap = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_TABLE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(CREATE_TABLE);
      T = jj_consume_token(STRING_LITERAL);
      jj_consume_token(OPEN);
      columnMap = addColumns();
      jj_consume_token(CLOSE);
      jj_consume_token(FILEPATH);
      jj_consume_token(QUOTE);
      path = jj_consume_token(FILE_NAME);
      jj_consume_token(QUOTE);
      jj_consume_token(SEMICOLON);
      table = new Schema.TableFromFile(new File(path.image));
      for (Map.Entry < String, String > iterator : columnMap.entrySet())
      {
        if (iterator.getValue().equals("int"))
        {
          table.add(new Schema.Column(T.image, iterator.getKey(), Schema.Type.INT));
        }
        else if (iterator.getValue().equals("float"))
        {
          table.add(new Schema.Column(T.image, iterator.getKey(), Schema.Type.FLOAT));
        }
        else if (iterator.getValue().equals("bool"))
        {
          table.add(new Schema.Column(T.image, iterator.getKey(), Schema.Type.BOOL));
        }
        else if (iterator.getValue().equals("string"))
        {
          table.add(new Schema.Column(T.image, iterator.getKey(), Schema.Type.STRING));
        }
      }
      tables.put(T.image, table);
    }
  }

  static final public LinkedHashMap < String, String > addColumns() throws ParseException {
  Token TName;
  Token TType;
  LinkedHashMap < String, String > var = new LinkedHashMap < String, String > ();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      TName = jj_consume_token(STRING_LITERAL);
      TType = jj_consume_token(STRING_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      var.put(TName.image, TType.image);
    }
    {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public List<PlanNode > initPlannode(Map < String, Schema.TableFromFile > tables) throws ParseException {
  Token table, var=null;
  JoinNode lhs_join = null, rhs_join = null, jroot = null;
  ExprTree lhs = null, rhs = null, root = null;
  List<PlanNode > q = new ArrayList<PlanNode >();
  int exec = 0;
  ScanNode lhs_scan = null, rhs_scan = null;
    label_3:
    while (true) {
      jj_consume_token(SELECT);
      ProjectionNode query_0 = new ProjectionNode();
      label_4:
      while (true) {
        table = jj_consume_token(STRING_LITERAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          var = jj_consume_token(STRING_LITERAL);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        if(var!=null)
                query_0.addColumn(new ProjectionNode.Column(var.image, new ExprTree.VarLeaf(table.image, var.image)));
        else
        {
                query_0.addColumn(new ProjectionNode.Column(table.image, new ExprTree.VarLeaf(table.image)));
                exec = -1;
       }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        jj_consume_token(FROM);
        label_5:
        while (true) {
          table = jj_consume_token(STRING_LITERAL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case JOIN:
          case COMMA:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              break;
            case JOIN:
              jj_consume_token(JOIN);
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
            for (Map.Entry < String, Schema.TableFromFile > iterator : tables.entrySet())
            {
              if (iterator.getKey().equals(table.image))
              {
                lhs_scan = new ScanNode(table.image, table.image, iterator.getValue());
              }
            }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_LITERAL:
            table = jj_consume_token(STRING_LITERAL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case JOIN:
            case COMMA:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                break;
              case JOIN:
                jj_consume_token(JOIN);
                break;
              default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[9] = jj_gen;
              ;
            }
            for (Map.Entry < String, Schema.TableFromFile > iterator : tables.entrySet())
            {
              if (iterator.getKey().equals(table.image))
              {
                rhs_scan = new ScanNode(table.image, table.image, iterator.getValue());
              }
            }
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          if (lhs_scan != null && rhs_scan != null)
          {
            if (lhs_join == null)
            {
              lhs_join = new JoinNode();
              lhs_join.setLHS(lhs_scan);
              lhs_join.setRHS(rhs_scan);
              lhs_scan = null;
              rhs_scan = null;
            }
            else if (rhs_join == null)
            {
              rhs_join = new JoinNode();
              rhs_join.setLHS(lhs_scan);
              rhs_join.setRHS(rhs_scan);
              jroot = new JoinNode();
              jroot.setLHS(lhs_join);
              jroot.setRHS(rhs_join);
              lhs_join = null;
              rhs_join = null;
              lhs_scan = null;
              rhs_scan = null;
            }
          }
          else if (lhs_scan != null && rhs_scan == null)
          {
            if (jroot == null && lhs_join != null)
            {
              jroot = new JoinNode();
              jroot.setLHS(lhs_join);
              jroot.setRHS(lhs_scan);
              lhs_join = null;
              lhs_scan = null;
            }
            else if (jroot != null && lhs_join == null)
            {
              lhs_join = jroot;
              jroot.setLHS(lhs_join);
              jroot.setRHS(lhs_scan);
              lhs_join = null;
              lhs_scan = null;
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_LITERAL:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
        }
        if (lhs_join != null)
        {
          jroot = lhs_join;
          lhs_join = null;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
          jj_consume_token(WHERE);
        selectExpression(jroot, query_0);
        exec = 1;
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ON:
          jj_consume_token(ON);
        selectExpression(jroot, query_0);
        exec = 1;
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      if(exec == 0)
        query_0.setChild(jroot);
      else if(exec == -1)
        query_0.setChild(lhs_scan);
      exec = 0;
      q.add(query_0);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(0);
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  static final public void selectExpression(JoinNode jroot, ProjectionNode query_0) throws ParseException {
  SelectionNode expression = null;
  ExprTree.OpCode rootOp = null;
  ExprTree lhs = null;
  ExprTree rhs = null;
  ExprTree root = null, lroot = null, rroot = null;
  Token open, close;
  int flag = 0;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case OPEN:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
        open = jj_consume_token(OPEN);
        if (open.image != null) flag++;
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      lhs = queryTerm();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLOSE:
        close = jj_consume_token(CLOSE);
        if (close.image != null) flag--;
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
        if (expression == null)
        {
          if (flag == 0) rootOp = ExprTree.OpCode.AND;
        }
          label_8:
          while (true) {
            open = jj_consume_token(OPEN);
          if (open.image != null) flag++;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPEN:
              ;
              break;
            default:
              jj_la1[20] = jj_gen;
              break label_8;
            }
          }
          rhs = queryTerm();
          label_9:
          while (true) {
            close = jj_consume_token(CLOSE);
          if (close.image != null) flag--;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLOSE:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_9;
            }
          }
        if (lroot == null && flag == 0)
        {
          lroot = new ExprTree(ExprTree.OpCode.AND, lhs, rhs);
          lhs = null;
          rhs = null;
        }
        else if (lroot == null && flag > 0)
        {
          lroot = lhs;
          lhs = rhs;
          rhs = null;
        }
        else if (lroot != null && flag > 0)
        {
          rroot = rhs;
          rhs = null;
        }
        else if (lroot != null && rroot == null && flag == 0)
        {
          rroot = new ExprTree(ExprTree.OpCode.AND, lhs, rhs);
          lhs = null;
          rhs = null;
        }
        if (lroot != null && rroot != null && flag == 0)
        {
          root = new ExprTree(rootOp, lroot, rroot);
          lroot = null;
          rroot = null;
        }
        else if (lroot != null && rroot == null && lhs != null && rhs == null && flag == 0)
        {
          root = new ExprTree(rootOp, lroot, lhs);
          lroot = null;
          lhs = null;
        }
        else if (lroot != null && rroot == null && lhs == null && rhs != null && flag == 0)
        {
          root = new ExprTree(rootOp, lroot, rhs);
          lroot = null;
          rhs = null;
        }
        else if (lroot != null && rroot == null && lhs == null && rhs == null && flag == 0)
        {
          root = lroot;
          lroot = null;
        }
        else if (lhs != null && lroot == null && rroot == null && rhs == null && flag == 0)
        {
          root = lhs;
          lhs = null;
        }
          break;
        case OR:
          jj_consume_token(OR);
        if (expression == null)
        {
          if (flag == 0) rootOp = ExprTree.OpCode.OR;
        }
          label_10:
          while (true) {
            open = jj_consume_token(OPEN);
          if (open.image != null) flag++;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPEN:
              ;
              break;
            default:
              jj_la1[22] = jj_gen;
              break label_10;
            }
          }
          rhs = queryTerm();
          label_11:
          while (true) {
            close = jj_consume_token(CLOSE);
          if (close.image != null) flag--;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLOSE:
              ;
              break;
            default:
              jj_la1[23] = jj_gen;
              break label_11;
            }
          }
        if (lroot == null && flag == 0)
        {
          lroot = new ExprTree(ExprTree.OpCode.OR, lhs, rhs);
          lhs = null;
          rhs = null;
        }
        else if (lroot == null && flag > 0)
        {
          lroot = lhs;
          lhs = rhs;
          rhs = null;
        }
        else if (lroot != null && flag > 0)
        {
          rroot = rhs;
          rhs = null;
        }
        else if (lroot != null && rroot == null && lhs != null && rhs != null && flag == 0)
        {
          rroot = new ExprTree(ExprTree.OpCode.OR, lhs, rhs);
          lhs = null;
          rhs = null;
        }
        if (lroot != null && rroot != null && flag == 0)
        {
          root = new ExprTree(rootOp, lroot, rroot);
          lroot = null;
          rroot = null;
        }
        else if (lroot != null && rroot == null && lhs != null && rhs == null && flag == 0)
        {
          root = new ExprTree(rootOp, lroot, lhs);
          lroot = null;
          lhs = null;
        }
        else if (lroot != null && rroot == null && lhs == null && rhs != null && flag == 0)
        {
          root = new ExprTree(rootOp, lroot, rhs);
          lroot = null;
          rhs = null;
        }
        else if (lroot != null && rroot == null && lhs == null && rhs == null && flag == 0)
        {
          root = lroot;
          lroot = null;
        }
        else if (lhs != null && lroot == null && rroot == null && rhs == null && flag == 0)
        {
          root = lhs;
          lhs = null;
        }
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    if (lhs != null && lroot == null && rroot == null && rhs == null && flag == 0)
    {
      root = lhs;
      lhs = null;
    }
    if (expression == null)
    {
      expression = new SelectionNode(root);
      expression.setChild(jroot);
      query_0.setChild(expression);
    }
  }

  static final public ExprTree queryTerm() throws ParseException {
  ExprTree rootCompareOp = null;
  ExprTree.OpCode rootOpCode = null;
  Token tname1;
  Token cname1;
  Token tname2;
  Token cname2;
  int flag = 0;
    tname1 = jj_consume_token(STRING_LITERAL);
    jj_consume_token(DOT);
    cname1 = jj_consume_token(STRING_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      jj_consume_token(LESS);
        rootOpCode = ExprTree.OpCode.LT;
      break;
    case LESSEQUAL:
      jj_consume_token(LESSEQUAL);
        rootOpCode = ExprTree.OpCode.LTE;
      break;
    case GREATER:
      jj_consume_token(GREATER);
        rootOpCode = ExprTree.OpCode.GT;
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
        rootOpCode = ExprTree.OpCode.EQ;
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
        rootOpCode = ExprTree.OpCode.NEQ;
      break;
    case GREATEREQUAL:
      jj_consume_token(GREATEREQUAL);
        rootOpCode = ExprTree.OpCode.GTE;
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tname2 = jj_consume_token(STRING_LITERAL);
    jj_consume_token(DOT);
    cname2 = jj_consume_token(STRING_LITERAL);
      rootCompareOp = new ExprTree(rootOpCode, new ExprTree.VarLeaf(tname1.image, cname1.image), new ExprTree.VarLeaf(tname2.image, cname2.image));
    {if (true) return rootCompareOp;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SQLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x80000,0x0,0x0,0x0,0x80000,0x200,0x200,0x200,0x200,0x80000,0x80000,0x400,0x800,0x100,0x40,0x80000,0x0,0x0,0x44000,0x0,0x0,0x0,0x0,0x44000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4,0x8,0x4,0x0,0x4,0x4,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x10000,0x0,0x8000,0x10000,0x8000,0x10000,0x0,0x3f0,};
   }

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
